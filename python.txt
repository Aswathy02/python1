# Assignment 1
# Comparison operators-> ==,>,<,>=,<=,!=  and Assignment operator-> =
x={"A","B","C","D"}
y={"C","D"}
print(x)
print(y)
print("x==y is",x==y)
print("x>y is",x>y)
print("x<y is",x<y)
print("x!=y is",x!=y)
print("x<=y is",x<=y)
print("x>=y is",x>=y)
print()
x=y
print(x)

x=["A","B","C","D"]
y=["C","D"]
print(x)
print(y)
print("x==y is",x==y)
print("x>y is",x>y)
print("x<y is",x<y)
print("x!=y is",x!=y)
print("x<=y is",x<=y)
print("x>=y is",x>=y)
print()
x=y
print(x)

x=("A","B","C","D")
y=("C","D")
print(x)
print(y)
print("x==y is",x==y)
print("x>y is",x>y)
print("x<y is",x<y)
print("x!=y is",x!=y)
print("x<=y is",x<=y)
print("x>=y is",x>=y)
print()
x=y
print(x)


{'D', 'A', 'B', 'C'}
{'D', 'C'}
x==y is False
x>y is True
x<y is False
x!=y is True
x<=y is False
x>=y is True

{'D', 'C'}

['A', 'B', 'C', 'D']
['C', 'D']
x==y is False
x>y is False
x<y is True
x!=y is True
x<=y is True
x>=y is False

['C', 'D']

('A', 'B', 'C', 'D')
('C', 'D')
x==y is False
x>y is False
x<y is True
x!=y is True
x<=y is True
x>=y is False

('C', 'D')



# Assignment 2 
# create a function which gets two user inputs as operands and the operation to be performed on them as user input as well and do the calculation.
print("Choices")
print("  1 - Addition")
print("  2 - Subtraction")
print("  3 - Multiplication")
print("  4 - Division")

x=input("Enter the choice : ")
num1 = float(input("Enter the first number : "))
num2 = float(input("Enter the second number : "))

if x=="1":
  print(num1 , "+" , num2 , "=" , (num1+num2))
elif x=="2":
  print(num1 , "-" , num2 , "=" , (num1-num2))
elif x=="3":
  print(num1 , "*" , num2 , "=" , (num1*num2))
elif x=="4":
  if num2 == 0.0:
    print("Division by zero error")
  else:
    print(num1 , "/" , num2 , "=" , (num1/num2)) 
else:
  print("invalid Choice")
  
  
  Choices
  1 - Addition
  2 - Subtraction
  3 - Multiplication
  4 - Division
Enter the choice : 2
Enter the first number : 345.43
Enter the second number : 243.87
345.43 - 243.87 = 101.56



# Assignment 3 
# what are r+,w+,a+ operations
# r+ : Opens a file for reading and writing.
# w+ : Opens a file for writing and reading.
# a+ : Opens a file for both appending and reading.
x=open("file.txt","r")
print(x.read())

welcome to python 1
welcome to python 2
welcome to python 3
welcome to python 4

x=open('file.txt', 'r+')
print(x.write("new line \n"))
x=open('file.txt', 'r+')
print(x.read())

10
new line 
 python 1
welcome to python 2
welcome to python 3
welcome to python 4

x=open('file.txt', 'w+')
x.write("test 1\n")
x.write("test 2\n")
x.write("test 3\n")
x=open('file.txt', 'w+')
print(x.read()) 

test 1
test 2
test 3

x=open('file.txt', 'a+')
x.write("\n all are completed")
x=open('file.txt', 'a+')
print(x.read())

test 1
test 2
test 3

 all are completed
 all are completed
 all are completed


# Assignment 4
# how can we print datas in ascenting or descending order 
nums=[1,3,2,5,6,45,26,15,87,100]
nums.sort()
print("list in ascending order: ",nums)
for a in nums:
  print(a)

nums.sort(reverse=True)
print("list in descending order: ",nums)
for x in nums:
  print(x)
  
  
  list in ascending order:  [1, 2, 3, 5, 6, 15, 26, 45, 87, 100]
1
2
3
5
6
15
26
45
87
100
list in descending order:  [100, 87, 45, 26, 15, 6, 5, 3, 2, 1]
100
87
45
26
15
6
5
3
2
1



# Assignment 5
# create an example of * and **
def sums(*args):
  return sum(args)
print(sums(1,2,3,4))
print(sums(1,2,5,7,8,947))

def fun(name,*args):
  print(name)
  print(args)
fun("anu",57,65,34,45,63,42)

def col(game,*score,**total):
  print(game)
  print(score)
  print(total)
col("football",3,2,0,1,team1=1,team2=1,team3=0,team4=0)


10
970
anu
(57, 65, 34, 45, 63, 42)
football
(3, 2, 0, 1)
{'team1': 1, 'team2': 1, 'team3': 0, 'team4': 0}



# Assignment -6
# create tables with lambda function
multiply=(lambda x=x:x*2 for x in range (1,11))
for table in multiply:
  print(table())
 
2
4
6
8
10
12
14
16
18
20
  
multiply=(lambda x=x:x*3 for x in range (1,11))
for table in multiply:
  print(table())
  
3
6
9
12
15
18
21
24
27
30 
  
multiply=(lambda x=x:x*4 for x in range (1,11))
for table in multiply:
  print(table())
  
4
8
12
16
20
24
28
32
36
40 
  
multiply=(lambda x=x:x*5 for x in range (1,11))
for table in multiply:
  print(table())
  
5
10
15
20
25
30
35
40
45
50
  
multiply=(lambda x=x:x*6 for x in range (1,11))
for table in multiply:
  print(table())
  
6
12
18
24
30
36
42
48
54
60
  
multiply=(lambda x=x:x*7 for x in range (1,11))
for table in multiply:
  print(table())
  
7
14
21
28
35
42
49
56
63
70  
  
multiply=(lambda x=x:x*8 for x in range (1,11))
for table in multiply:
  print(table())
  
8
16
24
32
40
48
56
64
72
80  
  
multiply=(lambda x=x:x*9 for x in range (1,11))
for table in multiply:
  print(table())
  
9
18
27
36
45
54
63
72
81
90



#Assignment -7
# create an example of generator
def generator():
  yield "Welcome"
  yield "to"
  yield "my"
  yield "WORLD"
a = generator()
print(type(a))
for x in a:
  print(x) 

def odd(number):
  for no in range(number):
    if(no%2!=0):
      yield no
odd_number=odd(20)
print(list(odd_number))

def even(number):
  for no in range(number):
    if(no%2==0):
      yield no
even_number=even(20)
print(list(even_number))


<class 'generator'>
Welcome
to
my
WORLD

[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]



#Assignment-8
# create example of encapsulation and polimorphism
#Encapsulation
class attendence():
  def __init__(s,name,nickname):
    s.name=name
    s.nickname=nickname
  def privateacces(s):
    print(s.__nickname)

obj=attendence("Tom","Tutu")
print(obj.name)
print(obj.nickname)


Tom
Tutu

#polymorphism
class numbers():
  def intro(self):
    print("Numbers are a quantity or amount")
  def feature(self):
    print("Not all numbers are whole numbers")
class float(numbers):
  def feature(self):
    print("float numbers are not whole numbers")
class integer(numbers):
  def feature(self):
    print("integer is a whole number")

num=numbers()
flt=float()
int=integer()

num.feature()
flt.feature()
int.feature()


Not all numbers are whole numbers
float numbers are not whole numbers
integer is a whole number
